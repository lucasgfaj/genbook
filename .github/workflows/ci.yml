name: Continous Integration

on:
  push:
  # pull_request:
  #   types: [opened, synchronize, reopened]

jobs:
  tests:
    name: Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Create .env
        run: cp .env.example .env

      - name: Composer install
        run: ./run composer install

      - name: Setup Uploads assets permissions
        run: sudo chown -R www-data:www-data public/uploads

      - name: Up containers
        run: ./run up -d

      - name: See containers
        run: ./run ps

     - name: Wait for PostgreSQL
        run: |
          echo "Waiting for PostgreSQL to be ready..."
          # Usa docker-compose exec com -T (sem TTY) e checa conexÃ£o
          until docker-compose exec -T db pg_isready -U $DB_USERNAME > /dev/null 2>&1; do
            sleep 2
          done
          echo "PostgreSQL is ready!"

      - name: Create test database
        run: docker-compose exec -T db psql -U $DB_USERNAME -c "CREATE DATABASE genbook_test;" || true


      - name: PHPUnit Units test
        run: ./run tests

  acceptance_tests:
    name: Acceptance Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Create .env
        run: cp .env.example .env

      - name: Composer install
        run: ./run composer install

      - name: Up containers
        run: ./run up -d

      - name: See containers
        run: ./run ps

  code_quality:
    name: Code Quality Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Create .env
        run: cp .env.example .env

      - name: Composer install
        run: ./run composer install

      - name: PSR-4 Checker
        run: ./run composer dump-autoload --optimize --strict-psr

      - name: PHPCS
        run: ./run phpcs

      - name: PHPStan
        run: ./run phpstan